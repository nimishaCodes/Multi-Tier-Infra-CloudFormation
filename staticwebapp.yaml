AWSTemplateFormatVersion: "2010-09-09"

Description: |
  AWS CloudFormation Sample Template for a static web app. This template installs a highly-available, scalable web application deployment. It demonstrates using the AWS CloudFormation bootstrap scripts to deploy a stateless web application.
  **WARNING** You will be billed for the AWS resources created if you create a stack from this template.
  Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with the License. A copy of the License is located at

      https://www.apache.org/licenses/LICENSE-2.0

  or in the "license" file accompanying this file. This file is distributed  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  express or implied. See the License for the specific language governing  permissions and limitations under the License.

########################################################################
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters:
          - NamingPrefix
      - Label:
          default: VPC Stack Imports
        Parameters:
          - VPCImportName
          - VPCImportALB1Subnet1
          - VPCImportALB1Subnet2
          - VPCImportALB1Subnet3
      - Label:
          default: Application Tier Configuration
        Parameters:
          - InstanceType
          - LatestAmiId
          - ServerCodeUrl
          - Web1AutoScaleDesired
          - ALBSGSource

########################################################################
Parameters:

  #General:
  NamingPrefix:
    Description: The naming prefix for resources created by this template.
    Type: String
    Default: WebApp1

  #Imports:
  VPCImportName:
    Description: The CloudFormation name of the VPC stack to import
    Type: String
    Default: WebApp1-VPC
    MinLength: "3"
    MaxLength: "32"

  VPCImportALB1Subnet1:
    Description: The name of the subnet from VPC stack to import
    Type: String
    Default: ALB1Subnet1

  VPCImportALB1Subnet2:
    Description: The name of the subnet from VPC stack to import
    Type: String
    Default: ALB1Subnet2

  VPCImportALB1Subnet3:
    Description: The name of the subnet from VPC stack to import
    Type: String
    Default: ALB1Subnet3

  #Application Tier
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
    Default: t3.micro
    ConstraintDescription: must be a valid EC2 instance type.

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  ServerCodeUrl:
    Type: String
    Default: https://aws-well-architected-labs-ohio.s3.us-east-2.amazonaws.com/Healthcheck/Code/server_basic.py
    AllowedPattern: ^(https?:\/\/)([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
    ConstraintDescription: URL where server code can be downloaded, such as S3 or GitHub.

  ALBSGSource:
    Description: The IP address range that can be used to access the web app
    Type: String
    Default: 0.0.0.0/0
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  Web1AutoScaleDesired:
    Description: The desired number of web instances in auto scaling group
    Type: Number
    Default: "3"
    MinValue: "3"
    MaxValue: "6"
    ConstraintDescription: must be between 3 and 6 EC2 instances.

########################################################################


# "Conditions" would go here, but this CloudFormation Template does not 
# make use of them


########################################################################
Resources:
  DynamoDBServiceMockTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: RecommendationService
      AttributeDefinitions:
        - AttributeName: ServiceAPI
          AttributeType: S
        - AttributeName: UserID
          AttributeType: "N"
      KeySchema:
        - AttributeName: ServiceAPI
          KeyType: HASH
        - AttributeName: UserID
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      SSESpecification:
        SSEEnabled: "true"

  ALB1SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and 443 to the allowed CIDR
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: !Ref ALBSGSource
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: !Ref ALBSGSource
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Load Balancer
      VpcId: !ImportValue
        Fn::Sub: '${VPCImportName}'

  ALB1LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Properties:
      SecurityGroups:
        - !Ref ALB1SecurityGroup
      Subnets:
        - !ImportValue
          Fn::Sub: '${VPCImportName}-${VPCImportALB1Subnet1}'
        - !ImportValue
          Fn::Sub: '${VPCImportName}-${VPCImportALB1Subnet2}'
        - !ImportValue
          Fn::Sub: '${VPCImportName}-${VPCImportALB1Subnet3}'

  ALB1Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener

    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    Properties:

      #  Certificates:
      #- Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALB1TargetGroup
      LoadBalancerArn: !Ref ALB1LoadBalancer
      Port: "80"
      Protocol: HTTP

  ALB1TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Properties:
      HealthCheckPath: /healthcheck
      HealthCheckIntervalSeconds: 15

      #HealthCheckPort: 
      #HealthCheckProtocol:
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP

      # A short drain time helps speed up the lab
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue
        Fn::Sub: '${VPCImportName}'

  Web1InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and 443 restricted to the load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt ALB1LoadBalancer.SecurityGroups
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt ALB1LoadBalancer.SecurityGroups
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Instance
      VpcId: !ImportValue
        Fn::Sub: '${VPCImportName}'

  WebAppAutoScalingGroup:
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"
    Type: AWS::AutoScaling::AutoScalingGroup

    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
    Properties:

      # To make it faster to update the server during the lab,
      # we will be replacing the AutoScalingGroup. Therefore
      # we must let CloudFormation name it
      # AutoScalingGroupName: !Sub '${NamingPrefix}'
      VPCZoneIdentifier:
        - !ImportValue
          Fn::Sub: '${VPCImportName}-App1Subnet1'
        - !ImportValue
          Fn::Sub: '${VPCImportName}-App1Subnet2'
        - !ImportValue
          Fn::Sub: '${VPCImportName}-App1Subnet3'
      LaunchConfigurationName: !Ref Web1LaunchConfig
      MinSize: "3"
      MaxSize: !Ref Web1AutoScaleDesired
      DesiredCapacity: !Ref Web1AutoScaleDesired
      TargetGroupARNs:
        - !Ref ALB1TargetGroup
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}'
          PropagateAtLaunch: true

  Web1LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration

    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html
    Properties:
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref Web1InstanceInstanceProfile
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref Web1InstanceSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          yum -y update
          sleep 30 # prevent "Error: Rpmdb changed underneath us"
          yum install python3 python-virtualenv python-pip -y
          python3 -m venv /home/ec2-user/venv
          source /home/ec2-user/venv/bin/activate
          pip install boto3
          pip install ec2_metadata
          wget -O server.py ${ServerCodeUrl}
          python3 server.py -p 80 -r ${AWS::Region}

  WebInstancePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy used by EC2 WebServers
      ManagedPolicyName: !Sub '${NamingPrefix}-EC2-Policy-${AWS::StackName}'
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeInstanceStatus
            Resource: '*'

            # VPC Flow Logs: https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-cwl.html
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*

            # CloudWatch: Required to create metrics" https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/permissions-reference-cw.html
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: '*'

            # SSM: Our web app code on EC2 reads an SSM Parameter as part of this lab
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: '*'

  # IAM Role for EC2 servers including access to DynamoDB (DDB)
  Web1InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamingPrefix}-EC2-Role-${AWS::StackName}'
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref WebInstancePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

      # In addition to the ManagedPolicy, give it access to DDB
      Policies:
        - PolicyName: ddbReadOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:Describe*
                  - dynamodb:List*
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: arn:aws:dynamodb:*:*:table/*

  # IAM Role for EC2 servers WITHOUT access to DynamoDB (DDB)
  Web2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamingPrefix}-EC2-noDDB-Role-${AWS::StackName}'
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref WebInstancePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  Web1InstanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${NamingPrefix}-EC2-Role-${AWS::StackName}'
      Path: /Web1InstanceEc2Role/
      Roles:
        - !Ref Web1InstanceRole

  Web2InstanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${NamingPrefix}-EC2-noDDB-Role-${AWS::StackName}'
      Path: /Web2InstanceEc2Role/
      Roles:
        - !Ref Web2InstanceRole

  LoadDynamoDBLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamingPrefix}-Lambda-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ddbFull
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource: arn:aws:dynamodb:*:*:table/RecommendationService
        - PolicyName: cloudwatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  LoadDynamoDBLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LoadDynamoDBLambda
      Handler: index.handler
      Runtime: python3.12
      Timeout: "30"
      Role: !GetAtt LoadDynamoDBLambdaRole.Arn
      Code:
        ZipFile: !Sub "import boto3\nimport urllib.request\nimport cfnresponse\nimport logging\nimport signal\nimport json\nimport traceback\n\nLOGGER = logging.getLogger()\nLOGGER.setLevel(logging.INFO)\n\ndef populate_ddb_table():\n    # Get the service resource.\n    LOGGER.info('create client')\n    client = boto3.client('dynamodb', '${AWS::Region}')\n    \n    # @TODO, make bucket/object configurable\n    LOGGER.info('open file')\n    file = urllib.request.urlopen(\"https://aws-well-architected-labs-ohio.s3.us-east-2.amazonaws.com/Healthcheck/Data/RecommendationService.json\")\n    LOGGER.info('read file')\n    text = file.read()\n    LOGGER.info(text)\n    LOGGER.info('convert to JSON')\n    request_items = json.loads(text)\n    LOGGER.info('write to DDB')\n    response = client.batch_write_item(RequestItems=request_items)\n    LOGGER.info('DONE')\n    \n    # @TODO add error handling \n    \n    # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.batch_write_item\n\n\ndef handler(event, context):\n    signal.alarm(int((context.get_remaining_time_in_millis() / 1000) - 1))\n    # Setup alarm for remaining runtime minus a second\n    try:\n        LOGGER.info('EVENT RECEIVED: %s', event)\n        LOGGER.info('CONTEXT RECEIVED: %s', context)\n        if event['RequestType'] == 'Create':\n            LOGGER.info('CREATE')\n            populate_ddb_table()\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\n                {'Message': 'Resource creation successful!'})\n        elif event['RequestType'] == 'Update':\n            LOGGER.info('UPDATE')\n            populate_ddb_table()\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\n                {'Message': 'Resource update successful!'})\n        elif event['RequestType'] == 'Delete':\n            LOGGER.info('DELETE')\n            # do nothing, table will be deleted anyway\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\n                {'Message': 'Resource deletion successful!'})\n        else:\n            LOGGER.info('FAILED!')\n            cfnresponse.send(event, context, cfnresponse.FAILED,\n                {'Message': 'Unexpected event received from CloudFormation'})\n    except Exception as e:\n        LOGGER.info(str(traceback.format_exception_only(e.__class__, e)))\n        LOGGER.info('FAILED!')\n        cfnresponse.send(event, context, cfnresponse.FAILED, {\n            'Message': 'Exception during processing'})\n\ndef timeout_handler(_signal, _frame):\n    raise Exception('Time exceeded')\n\nsignal.signal(signal.SIGALRM, timeout_handler)\n"

  CustomResource:
    Type: Custom::LoadDynamoDB
    Properties:
      ServiceToken: !GetAtt LoadDynamoDBLambda.Arn
      DynamoTableName: !Ref DynamoDBServiceMockTable

  RecommendationServiceEnabled:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: ^(true|false)$
      Description: switch used to enable/disable the mocked RecommendationService
      Name: RecommendationServiceEnabled
      Tier: Standard
      Type: String
      Value: "true"

########################################################################
Outputs:
  WebsiteURL:
    Description: Static Website
    Value: !Join
      - ""
      - - http://
        - !GetAtt ALB1LoadBalancer.DNSName
        - /
